{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Telemetry API endpoints\nexport const telemetryApi = {\n  // Get global telemetry status for all countries\n  getGlobalStatus: async () => {\n    const response = await apiClient.get('/telemetry/global');\n    return response.data;\n  },\n  // Get detailed telemetry status for a specific country\n  getCountryStatus: async countryId => {\n    const response = await apiClient.get(`/telemetry/country/${countryId}`);\n    return response.data;\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","response","use","error","_error$response","console","data","message","Promise","reject","telemetryApi","getGlobalStatus","get","getCountryStatus","countryId"],"sources":["/Users/benvandijk/Downloads/monitoring/TM/telephony-monitor/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Telemetry API endpoints\nexport const telemetryApi = {\n  // Get global telemetry status for all countries\n  getGlobalStatus: async () => {\n    const response = await apiClient.get('/telemetry/global');\n    return response.data;\n  },\n\n  // Get detailed telemetry status for a specific country\n  getCountryStatus: async (countryId) => {\n    const response = await apiClient.get(`/telemetry/country/${countryId}`);\n    return response.data;\n  }\n};\n\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAChCD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACTC,OAAO,CAACF,KAAK,CAAC,YAAY,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBE,IAAI,KAAIH,KAAK,CAACI,OAAO,CAAC;EAClE,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMO,YAAY,GAAG;EAC1B;EACAC,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,MAAMV,QAAQ,GAAG,MAAML,SAAS,CAACgB,GAAG,CAAC,mBAAmB,CAAC;IACzD,OAAOX,QAAQ,CAACK,IAAI;EACtB,CAAC;EAED;EACAO,gBAAgB,EAAE,MAAOC,SAAS,IAAK;IACrC,MAAMb,QAAQ,GAAG,MAAML,SAAS,CAACgB,GAAG,CAAC,sBAAsBE,SAAS,EAAE,CAAC;IACvE,OAAOb,QAAQ,CAACK,IAAI;EACtB;AACF,CAAC;AAED,eAAeV,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}