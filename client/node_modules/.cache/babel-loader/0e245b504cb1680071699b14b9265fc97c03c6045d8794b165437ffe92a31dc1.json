{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import{telemetryApi}from'../services/api';import StatusIndicator from'../components/StatusIndicator';import'./GlobalView.css';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const GlobalView=()=>{const[telemetryData,setTelemetryData]=useState([]);const[filteredData,setFilteredData]=useState([]);const[activeFilter,setActiveFilter]=useState(null);const[activeRegion,setActiveRegion]=useState(null);const[countrySearch,setCountrySearch]=useState('');const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const fetchData=async()=>{try{setLoading(true);const response=await telemetryApi.getGlobalStatus();console.log('Global status data:',response.data);// Handle the case where the response contains a data property (wrapped response)\nconst countryData=response.data.data||response.data;// Make sure we have an array before proceeding\nif(Array.isArray(countryData)){setTelemetryData(countryData);setFilteredData(countryData);}else{console.error('Expected an array but received:',typeof countryData);setError('Received invalid data format from the server');}setLoading(false);}catch(err){setError('Failed to fetch telemetry data. Please try again later.');setLoading(false);console.error('Error fetching telemetry data:',err);}};fetchData();// Set up polling every 5 minutes\nconst intervalId=setInterval(fetchData,5*60*1000);// Clean up interval on component unmount\nreturn()=>clearInterval(intervalId);},[]);// Apply filters when activeFilter or activeRegion changes or telemetryData updates\nuseEffect(()=>{if(!Array.isArray(telemetryData)){setFilteredData([]);return;}let filtered=[...telemetryData];// Apply status filter if active\nif(activeFilter){filtered=filtered.filter(item=>item.status===activeFilter);}// Apply region filter if active\nif(activeRegion){filtered=filtered.filter(item=>item.region===activeRegion);}// Apply country search if provided\nif(countrySearch){const search=countrySearch.toLowerCase();filtered=filtered.filter(item=>item.country.toLowerCase().includes(search));}setFilteredData(filtered);},[activeFilter,activeRegion,telemetryData,countrySearch]);// Handle status filter click\nconst handleFilterClick=status=>{if(activeFilter===status){// If clicking the same filter again, clear the filter\nsetActiveFilter(null);}else{setActiveFilter(status);}};// Handle region filter click\nconst handleRegionClick=region=>{if(activeRegion===region){// If clicking the same region again, clear the filter\nsetActiveRegion(null);}else{setActiveRegion(region);}};// Clear all filters\nconst clearAllFilters=()=>{setActiveFilter(null);setActiveRegion(null);setCountrySearch('');};// Format date to readable format\nconst formatDate=dateString=>{if(!dateString)return'N/A';const date=new Date(dateString);return date.toLocaleString();};// Get counts by region and status\nconst getStatusCounts=()=>{let regions={};let statuses={green:0,yellow:0,red:0};if(Array.isArray(telemetryData)){telemetryData.forEach(item=>{// Count by region\nif(!regions[item.region]){regions[item.region]={total:0,green:0,yellow:0,red:0};}regions[item.region].total+=1;regions[item.region][item.status]=(regions[item.region][item.status]||0)+1;// Count by status\nstatuses[item.status]=(statuses[item.status]||0)+1;});}else{console.error(\"telemetryData is undefined or null\");// Initialize with empty objects\nregions={};statuses={green:0,yellow:0,red:0};}return{regions,statuses};};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading global status...\"});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:error});}const{regions,statuses}=getStatusCounts();return/*#__PURE__*/_jsxs(\"div\",{className:\"global-view\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Global Telephony Status\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Last updated: \",new Date().toLocaleString()]}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:`status-card ${activeFilter==='green'?'active':''}`,onClick:()=>handleFilterClick('green'),children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Online\"}),/*#__PURE__*/_jsx(\"div\",{className:\"status-count green\",children:statuses.green}),activeFilter==='green'&&/*#__PURE__*/_jsx(\"div\",{className:\"filter-badge\",children:\"Filtered\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:`status-card ${activeFilter==='yellow'?'active':''}`,onClick:()=>handleFilterClick('yellow'),children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Degraded\"}),/*#__PURE__*/_jsx(\"div\",{className:\"status-count yellow\",children:statuses.yellow||0}),activeFilter==='yellow'&&/*#__PURE__*/_jsx(\"div\",{className:\"filter-badge\",children:\"Filtered\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:`status-card ${activeFilter==='red'?'active':''}`,onClick:()=>handleFilterClick('red'),children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Offline\"}),/*#__PURE__*/_jsx(\"div\",{className:\"status-count red\",children:statuses.red}),activeFilter==='red'&&/*#__PURE__*/_jsx(\"div\",{className:\"filter-badge\",children:\"Filtered\"})]})]}),Object.keys(regions).length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"region-summary\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Status by Region\"}),/*#__PURE__*/_jsx(\"div\",{className:\"region-cards\",children:Object.entries(regions).map(_ref=>{let[region,counts]=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:`region-card ${activeRegion===region?'active':''}`,onClick:()=>handleRegionClick(region),children:[/*#__PURE__*/_jsx(\"h3\",{children:region}),/*#__PURE__*/_jsxs(\"div\",{className:\"region-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Total:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:counts.total})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Online:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:counts.green})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Degraded:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:counts.yellow||0})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"stat\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"stat-label\",children:\"Offline:\"}),/*#__PURE__*/_jsx(\"span\",{className:\"stat-value\",children:counts.red})]})]}),activeRegion===region&&/*#__PURE__*/_jsx(\"div\",{className:\"filter-badge\",children:\"Filtered\"})]},region);})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"countries-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"header-left\",children:/*#__PURE__*/_jsx(\"h2\",{children:activeFilter||activeRegion?/*#__PURE__*/_jsxs(_Fragment,{children:[\"Countries\",activeFilter&&` - ${activeFilter==='green'?'Online':activeFilter==='yellow'?'Degraded':'Offline'}`,activeRegion&&` - ${activeRegion}`,` (${filteredData.length})`]}):`All Countries (${telemetryData.length||0})`})}),/*#__PURE__*/_jsxs(\"div\",{className:\"header-right\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"search-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search countries...\",value:countrySearch,onChange:e=>setCountrySearch(e.target.value),className:\"search-input\"}),countrySearch&&/*#__PURE__*/_jsx(\"button\",{className:\"clear-search-btn\",onClick:()=>setCountrySearch(''),children:\"\\xD7\"})]}),(activeFilter||activeRegion||countrySearch)&&/*#__PURE__*/_jsx(\"button\",{className:\"clear-filter visible\",onClick:clearAllFilters,children:\"Clear All Filters\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"table-container\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"telemetry-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Country\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Region\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Status\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Last Test\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filteredData.length>0?filteredData.map(country=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:country.country}),/*#__PURE__*/_jsx(\"td\",{children:country.region||'N/A'}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(StatusIndicator,{status:country.status})}),/*#__PURE__*/_jsx(\"td\",{children:formatDate(country.last_updated||country.last_checked)}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(Link,{to:`/country/${country.id||country.country}`,className:\"details-link\",children:\"View Details\"})})]},country.id||country.country)):/*#__PURE__*/_jsx(\"tr\",{children:/*#__PURE__*/_jsx(\"td\",{colSpan:\"5\",style:{textAlign:'center',padding:'20px'},children:\"No countries match your filter criteria\"})})})]})})]});};export default GlobalView;","map":{"version":3,"names":["React","useState","useEffect","Link","telemetryApi","StatusIndicator","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","GlobalView","telemetryData","setTelemetryData","filteredData","setFilteredData","activeFilter","setActiveFilter","activeRegion","setActiveRegion","countrySearch","setCountrySearch","loading","setLoading","error","setError","fetchData","response","getGlobalStatus","console","log","data","countryData","Array","isArray","err","intervalId","setInterval","clearInterval","filtered","filter","item","status","region","search","toLowerCase","country","includes","handleFilterClick","handleRegionClick","clearAllFilters","formatDate","dateString","date","Date","toLocaleString","getStatusCounts","regions","statuses","green","yellow","red","forEach","total","className","children","onClick","Object","keys","length","entries","map","_ref","counts","type","placeholder","value","onChange","e","target","last_updated","last_checked","to","id","colSpan","style","textAlign","padding"],"sources":["/Users/benvandijk/Downloads/monitoring/TM/client/src/views/GlobalView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { telemetryApi } from '../services/api';\nimport StatusIndicator from '../components/StatusIndicator';\nimport './GlobalView.css';\n\nconst GlobalView = () => {\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [activeFilter, setActiveFilter] = useState(null);\n  const [activeRegion, setActiveRegion] = useState(null);\n  const [countrySearch, setCountrySearch] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await telemetryApi.getGlobalStatus();\n        console.log('Global status data:', response.data);\n        \n        // Handle the case where the response contains a data property (wrapped response)\n        const countryData = response.data.data || response.data;\n        \n        // Make sure we have an array before proceeding\n        if (Array.isArray(countryData)) {\n          setTelemetryData(countryData);\n          setFilteredData(countryData);\n        } else {\n          console.error('Expected an array but received:', typeof countryData);\n          setError('Received invalid data format from the server');\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch telemetry data. Please try again later.');\n        setLoading(false);\n        console.error('Error fetching telemetry data:', err);\n      }\n    };\n\n    fetchData();\n\n    // Set up polling every 5 minutes\n    const intervalId = setInterval(fetchData, 5 * 60 * 1000);\n    \n    // Clean up interval on component unmount\n    return () => clearInterval(intervalId);\n  }, []);\n  \n  // Apply filters when activeFilter or activeRegion changes or telemetryData updates\n  useEffect(() => {\n    if (!Array.isArray(telemetryData)) {\n      setFilteredData([]);\n      return;\n    }\n    \n    let filtered = [...telemetryData];\n    \n    // Apply status filter if active\n    if (activeFilter) {\n      filtered = filtered.filter(item => item.status === activeFilter);\n    }\n    \n    // Apply region filter if active\n    if (activeRegion) {\n      filtered = filtered.filter(item => item.region === activeRegion);\n    }\n    \n    // Apply country search if provided\n    if (countrySearch) {\n      const search = countrySearch.toLowerCase();\n      filtered = filtered.filter(item => \n        item.country.toLowerCase().includes(search)\n      );\n    }\n    \n    setFilteredData(filtered);\n  }, [activeFilter, activeRegion, telemetryData, countrySearch]);\n  \n  // Handle status filter click\n  const handleFilterClick = (status) => {\n    if (activeFilter === status) {\n      // If clicking the same filter again, clear the filter\n      setActiveFilter(null);\n    } else {\n      setActiveFilter(status);\n    }\n  };\n  \n  // Handle region filter click\n  const handleRegionClick = (region) => {\n    if (activeRegion === region) {\n      // If clicking the same region again, clear the filter\n      setActiveRegion(null);\n    } else {\n      setActiveRegion(region);\n    }\n  };\n  \n  // Clear all filters\n  const clearAllFilters = () => {\n    setActiveFilter(null);\n    setActiveRegion(null);\n    setCountrySearch('');\n  };\n\n  // Format date to readable format\n  const formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n\n  // Get counts by region and status\n  const getStatusCounts = () => {\n    let regions = {};\n    let statuses = {\n      green: 0,\n      yellow: 0,\n      red: 0\n    };\n    \n    if (Array.isArray(telemetryData)) {\n      telemetryData.forEach(item => {\n        // Count by region\n        if (!regions[item.region]) {\n          regions[item.region] = {\n            total: 0,\n            green: 0,\n            yellow: 0,\n            red: 0\n          };\n        }\n        \n        regions[item.region].total += 1;\n        regions[item.region][item.status] = (regions[item.region][item.status] || 0) + 1;\n        \n        // Count by status\n        statuses[item.status] = (statuses[item.status] || 0) + 1;\n      });\n    } else {\n      console.error(\"telemetryData is undefined or null\");\n      // Initialize with empty objects\n      regions = {};\n      statuses = { green: 0, yellow: 0, red: 0 };\n    }\n    \n    return { regions, statuses };\n  }\n\n  if (loading) {\n    return <div className=\"loading\">Loading global status...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  const { regions, statuses } = getStatusCounts();\n\n  return (\n    <div className=\"global-view\">\n      <h1>Global Telephony Status</h1>\n      <p>Last updated: {new Date().toLocaleString()}</p>\n      \n      <div className=\"status-summary\">\n        <div \n          className={`status-card ${activeFilter === 'green' ? 'active' : ''}`}\n          onClick={() => handleFilterClick('green')}\n        >\n          <h3>Online</h3>\n          <div className=\"status-count green\">{statuses.green}</div>\n          {activeFilter === 'green' && <div className=\"filter-badge\">Filtered</div>}\n        </div>\n        <div \n          className={`status-card ${activeFilter === 'yellow' ? 'active' : ''}`}\n          onClick={() => handleFilterClick('yellow')}\n        >\n          <h3>Degraded</h3>\n          <div className=\"status-count yellow\">{statuses.yellow || 0}</div>\n          {activeFilter === 'yellow' && <div className=\"filter-badge\">Filtered</div>}\n        </div>\n        <div \n          className={`status-card ${activeFilter === 'red' ? 'active' : ''}`}\n          onClick={() => handleFilterClick('red')}\n        >\n          <h3>Offline</h3>\n          <div className=\"status-count red\">{statuses.red}</div>\n          {activeFilter === 'red' && <div className=\"filter-badge\">Filtered</div>}\n        </div>\n      </div>\n      \n      {Object.keys(regions).length > 0 && (\n        <div className=\"region-summary\">\n          <h2>Status by Region</h2>\n          <div className=\"region-cards\">\n            {Object.entries(regions).map(([region, counts]) => (\n              <div \n                className={`region-card ${activeRegion === region ? 'active' : ''}`} \n                key={region}\n                onClick={() => handleRegionClick(region)}\n              >\n                <h3>{region}</h3>\n                <div className=\"region-stats\">\n                  <div className=\"stat\">\n                    <span className=\"stat-label\">Total:</span>\n                    <span className=\"stat-value\">{counts.total}</span>\n                  </div>\n                  <div className=\"stat\">\n                    <span className=\"stat-label\">Online:</span>\n                    <span className=\"stat-value\">{counts.green}</span>\n                  </div>\n                  <div className=\"stat\">\n                    <span className=\"stat-label\">Degraded:</span>\n                    <span className=\"stat-value\">{counts.yellow || 0}</span>\n                  </div>\n                  <div className=\"stat\">\n                    <span className=\"stat-label\">Offline:</span>\n                    <span className=\"stat-value\">{counts.red}</span>\n                  </div>\n                </div>\n                {activeRegion === region && <div className=\"filter-badge\">Filtered</div>}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <div className=\"countries-header\">\n        <div className=\"header-left\">\n          <h2>\n            {activeFilter || activeRegion ? (\n              <>\n                Countries \n                {activeFilter && ` - ${\n                  activeFilter === 'green' ? 'Online' : \n                  activeFilter === 'yellow' ? 'Degraded' : \n                  'Offline'\n                }`}\n                {activeRegion && ` - ${activeRegion}`}\n                {` (${filteredData.length})`}\n              </>\n            ) : (\n              `All Countries (${telemetryData.length || 0})`\n            )}\n          </h2>\n        </div>\n        \n        <div className=\"header-right\">\n          <div className=\"search-container\">\n            <input\n              type=\"text\"\n              placeholder=\"Search countries...\"\n              value={countrySearch}\n              onChange={(e) => setCountrySearch(e.target.value)}\n              className=\"search-input\"\n            />\n            {countrySearch && (\n              <button \n                className=\"clear-search-btn\"\n                onClick={() => setCountrySearch('')}\n              >\n                ×\n              </button>\n            )}\n          </div>\n          \n          {(activeFilter || activeRegion || countrySearch) && (\n            <button \n              className=\"clear-filter visible\"\n              onClick={clearAllFilters}\n            >\n              Clear All Filters\n            </button>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"table-container\">\n        <table className=\"telemetry-table\">\n          <thead>\n            <tr>\n              <th>Country</th>\n              <th>Region</th>\n              <th>Status</th>\n              <th>Last Test</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {filteredData.length > 0 ? (\n              filteredData.map((country) => (\n                <tr key={country.id || country.country}>\n                  <td>{country.country}</td>\n                  <td>{country.region || 'N/A'}</td>\n                  <td>\n                    <StatusIndicator status={country.status} />\n                  </td>\n                  <td>{formatDate(country.last_updated || country.last_checked)}</td>\n                  <td>\n                    <Link to={`/country/${country.id || country.country}`} className=\"details-link\">\n                      View Details\n                    </Link>\n                  </td>\n                </tr>\n              ))\n            ) : (\n              <tr>\n                <td colSpan=\"5\" style={{ textAlign: 'center', padding: '20px' }}>\n                  No countries match your filter criteria\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalView;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,kBAAkB,CACvC,OAASC,YAAY,KAAQ,iBAAiB,CAC9C,MAAO,CAAAC,eAAe,KAAM,+BAA+B,CAC3D,MAAO,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAE1B,KAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CACvB,KAAM,CAACC,aAAa,CAAEC,gBAAgB,CAAC,CAAGb,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACc,YAAY,CAAEC,eAAe,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACgB,YAAY,CAAEC,eAAe,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACkB,YAAY,CAAEC,eAAe,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CACtD,KAAM,CAACoB,aAAa,CAAEC,gBAAgB,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CACtD,KAAM,CAACsB,OAAO,CAAEC,UAAU,CAAC,CAAGvB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACwB,KAAK,CAAEC,QAAQ,CAAC,CAAGzB,QAAQ,CAAC,IAAI,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAyB,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC5B,GAAI,CACFH,UAAU,CAAC,IAAI,CAAC,CAChB,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAxB,YAAY,CAACyB,eAAe,CAAC,CAAC,CACrDC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEH,QAAQ,CAACI,IAAI,CAAC,CAEjD;AACA,KAAM,CAAAC,WAAW,CAAGL,QAAQ,CAACI,IAAI,CAACA,IAAI,EAAIJ,QAAQ,CAACI,IAAI,CAEvD;AACA,GAAIE,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,CAAE,CAC9BnB,gBAAgB,CAACmB,WAAW,CAAC,CAC7BjB,eAAe,CAACiB,WAAW,CAAC,CAC9B,CAAC,IAAM,CACLH,OAAO,CAACL,KAAK,CAAC,iCAAiC,CAAE,MAAO,CAAAQ,WAAW,CAAC,CACpEP,QAAQ,CAAC,8CAA8C,CAAC,CAC1D,CAEAF,UAAU,CAAC,KAAK,CAAC,CACnB,CAAE,MAAOY,GAAG,CAAE,CACZV,QAAQ,CAAC,yDAAyD,CAAC,CACnEF,UAAU,CAAC,KAAK,CAAC,CACjBM,OAAO,CAACL,KAAK,CAAC,gCAAgC,CAAEW,GAAG,CAAC,CACtD,CACF,CAAC,CAEDT,SAAS,CAAC,CAAC,CAEX;AACA,KAAM,CAAAU,UAAU,CAAGC,WAAW,CAACX,SAAS,CAAE,CAAC,CAAG,EAAE,CAAG,IAAI,CAAC,CAExD;AACA,MAAO,IAAMY,aAAa,CAACF,UAAU,CAAC,CACxC,CAAC,CAAE,EAAE,CAAC,CAEN;AACAnC,SAAS,CAAC,IAAM,CACd,GAAI,CAACgC,KAAK,CAACC,OAAO,CAACtB,aAAa,CAAC,CAAE,CACjCG,eAAe,CAAC,EAAE,CAAC,CACnB,OACF,CAEA,GAAI,CAAAwB,QAAQ,CAAG,CAAC,GAAG3B,aAAa,CAAC,CAEjC;AACA,GAAII,YAAY,CAAE,CAChBuB,QAAQ,CAAGA,QAAQ,CAACC,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACC,MAAM,GAAK1B,YAAY,CAAC,CAClE,CAEA;AACA,GAAIE,YAAY,CAAE,CAChBqB,QAAQ,CAAGA,QAAQ,CAACC,MAAM,CAACC,IAAI,EAAIA,IAAI,CAACE,MAAM,GAAKzB,YAAY,CAAC,CAClE,CAEA;AACA,GAAIE,aAAa,CAAE,CACjB,KAAM,CAAAwB,MAAM,CAAGxB,aAAa,CAACyB,WAAW,CAAC,CAAC,CAC1CN,QAAQ,CAAGA,QAAQ,CAACC,MAAM,CAACC,IAAI,EAC7BA,IAAI,CAACK,OAAO,CAACD,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACH,MAAM,CAC5C,CAAC,CACH,CAEA7B,eAAe,CAACwB,QAAQ,CAAC,CAC3B,CAAC,CAAE,CAACvB,YAAY,CAAEE,YAAY,CAAEN,aAAa,CAAEQ,aAAa,CAAC,CAAC,CAE9D;AACA,KAAM,CAAA4B,iBAAiB,CAAIN,MAAM,EAAK,CACpC,GAAI1B,YAAY,GAAK0B,MAAM,CAAE,CAC3B;AACAzB,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,IAAM,CACLA,eAAe,CAACyB,MAAM,CAAC,CACzB,CACF,CAAC,CAED;AACA,KAAM,CAAAO,iBAAiB,CAAIN,MAAM,EAAK,CACpC,GAAIzB,YAAY,GAAKyB,MAAM,CAAE,CAC3B;AACAxB,eAAe,CAAC,IAAI,CAAC,CACvB,CAAC,IAAM,CACLA,eAAe,CAACwB,MAAM,CAAC,CACzB,CACF,CAAC,CAED;AACA,KAAM,CAAAO,eAAe,CAAGA,CAAA,GAAM,CAC5BjC,eAAe,CAAC,IAAI,CAAC,CACrBE,eAAe,CAAC,IAAI,CAAC,CACrBE,gBAAgB,CAAC,EAAE,CAAC,CACtB,CAAC,CAED;AACA,KAAM,CAAA8B,UAAU,CAAIC,UAAU,EAAK,CACjC,GAAI,CAACA,UAAU,CAAE,MAAO,KAAK,CAC7B,KAAM,CAAAC,IAAI,CAAG,GAAI,CAAAC,IAAI,CAACF,UAAU,CAAC,CACjC,MAAO,CAAAC,IAAI,CAACE,cAAc,CAAC,CAAC,CAC9B,CAAC,CAED;AACA,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,GAAI,CAAAC,OAAO,CAAG,CAAC,CAAC,CAChB,GAAI,CAAAC,QAAQ,CAAG,CACbC,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,CAAC,CACTC,GAAG,CAAE,CACP,CAAC,CAED,GAAI5B,KAAK,CAACC,OAAO,CAACtB,aAAa,CAAC,CAAE,CAChCA,aAAa,CAACkD,OAAO,CAACrB,IAAI,EAAI,CAC5B;AACA,GAAI,CAACgB,OAAO,CAAChB,IAAI,CAACE,MAAM,CAAC,CAAE,CACzBc,OAAO,CAAChB,IAAI,CAACE,MAAM,CAAC,CAAG,CACrBoB,KAAK,CAAE,CAAC,CACRJ,KAAK,CAAE,CAAC,CACRC,MAAM,CAAE,CAAC,CACTC,GAAG,CAAE,CACP,CAAC,CACH,CAEAJ,OAAO,CAAChB,IAAI,CAACE,MAAM,CAAC,CAACoB,KAAK,EAAI,CAAC,CAC/BN,OAAO,CAAChB,IAAI,CAACE,MAAM,CAAC,CAACF,IAAI,CAACC,MAAM,CAAC,CAAG,CAACe,OAAO,CAAChB,IAAI,CAACE,MAAM,CAAC,CAACF,IAAI,CAACC,MAAM,CAAC,EAAI,CAAC,EAAI,CAAC,CAEhF;AACAgB,QAAQ,CAACjB,IAAI,CAACC,MAAM,CAAC,CAAG,CAACgB,QAAQ,CAACjB,IAAI,CAACC,MAAM,CAAC,EAAI,CAAC,EAAI,CAAC,CAC1D,CAAC,CAAC,CACJ,CAAC,IAAM,CACLb,OAAO,CAACL,KAAK,CAAC,oCAAoC,CAAC,CACnD;AACAiC,OAAO,CAAG,CAAC,CAAC,CACZC,QAAQ,CAAG,CAAEC,KAAK,CAAE,CAAC,CAAEC,MAAM,CAAE,CAAC,CAAEC,GAAG,CAAE,CAAE,CAAC,CAC5C,CAEA,MAAO,CAAEJ,OAAO,CAAEC,QAAS,CAAC,CAC9B,CAAC,CAED,GAAIpC,OAAO,CAAE,CACX,mBAAOhB,IAAA,QAAK0D,SAAS,CAAC,SAAS,CAAAC,QAAA,CAAC,0BAAwB,CAAK,CAAC,CAChE,CAEA,GAAIzC,KAAK,CAAE,CACT,mBAAOlB,IAAA,QAAK0D,SAAS,CAAC,OAAO,CAAAC,QAAA,CAAEzC,KAAK,CAAM,CAAC,CAC7C,CAEA,KAAM,CAAEiC,OAAO,CAAEC,QAAS,CAAC,CAAGF,eAAe,CAAC,CAAC,CAE/C,mBACEhD,KAAA,QAAKwD,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B3D,IAAA,OAAA2D,QAAA,CAAI,yBAAuB,CAAI,CAAC,cAChCzD,KAAA,MAAAyD,QAAA,EAAG,gBAAc,CAAC,GAAI,CAAAX,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC,EAAI,CAAC,cAElD/C,KAAA,QAAKwD,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7BzD,KAAA,QACEwD,SAAS,CAAE,eAAehD,YAAY,GAAK,OAAO,CAAG,QAAQ,CAAG,EAAE,EAAG,CACrEkD,OAAO,CAAEA,CAAA,GAAMlB,iBAAiB,CAAC,OAAO,CAAE,CAAAiB,QAAA,eAE1C3D,IAAA,OAAA2D,QAAA,CAAI,QAAM,CAAI,CAAC,cACf3D,IAAA,QAAK0D,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAEP,QAAQ,CAACC,KAAK,CAAM,CAAC,CACzD3C,YAAY,GAAK,OAAO,eAAIV,IAAA,QAAK0D,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,UAAQ,CAAK,CAAC,EACtE,CAAC,cACNzD,KAAA,QACEwD,SAAS,CAAE,eAAehD,YAAY,GAAK,QAAQ,CAAG,QAAQ,CAAG,EAAE,EAAG,CACtEkD,OAAO,CAAEA,CAAA,GAAMlB,iBAAiB,CAAC,QAAQ,CAAE,CAAAiB,QAAA,eAE3C3D,IAAA,OAAA2D,QAAA,CAAI,UAAQ,CAAI,CAAC,cACjB3D,IAAA,QAAK0D,SAAS,CAAC,qBAAqB,CAAAC,QAAA,CAAEP,QAAQ,CAACE,MAAM,EAAI,CAAC,CAAM,CAAC,CAChE5C,YAAY,GAAK,QAAQ,eAAIV,IAAA,QAAK0D,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,UAAQ,CAAK,CAAC,EACvE,CAAC,cACNzD,KAAA,QACEwD,SAAS,CAAE,eAAehD,YAAY,GAAK,KAAK,CAAG,QAAQ,CAAG,EAAE,EAAG,CACnEkD,OAAO,CAAEA,CAAA,GAAMlB,iBAAiB,CAAC,KAAK,CAAE,CAAAiB,QAAA,eAExC3D,IAAA,OAAA2D,QAAA,CAAI,SAAO,CAAI,CAAC,cAChB3D,IAAA,QAAK0D,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAEP,QAAQ,CAACG,GAAG,CAAM,CAAC,CACrD7C,YAAY,GAAK,KAAK,eAAIV,IAAA,QAAK0D,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,UAAQ,CAAK,CAAC,EACpE,CAAC,EACH,CAAC,CAELE,MAAM,CAACC,IAAI,CAACX,OAAO,CAAC,CAACY,MAAM,CAAG,CAAC,eAC9B7D,KAAA,QAAKwD,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B3D,IAAA,OAAA2D,QAAA,CAAI,kBAAgB,CAAI,CAAC,cACzB3D,IAAA,QAAK0D,SAAS,CAAC,cAAc,CAAAC,QAAA,CAC1BE,MAAM,CAACG,OAAO,CAACb,OAAO,CAAC,CAACc,GAAG,CAACC,IAAA,MAAC,CAAC7B,MAAM,CAAE8B,MAAM,CAAC,CAAAD,IAAA,oBAC5ChE,KAAA,QACEwD,SAAS,CAAE,eAAe9C,YAAY,GAAKyB,MAAM,CAAG,QAAQ,CAAG,EAAE,EAAG,CAEpEuB,OAAO,CAAEA,CAAA,GAAMjB,iBAAiB,CAACN,MAAM,CAAE,CAAAsB,QAAA,eAEzC3D,IAAA,OAAA2D,QAAA,CAAKtB,MAAM,CAAK,CAAC,cACjBnC,KAAA,QAAKwD,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3BzD,KAAA,QAAKwD,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,QAAM,CAAM,CAAC,cAC1C3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAEQ,MAAM,CAACV,KAAK,CAAO,CAAC,EAC/C,CAAC,cACNvD,KAAA,QAAKwD,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,SAAO,CAAM,CAAC,cAC3C3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAEQ,MAAM,CAACd,KAAK,CAAO,CAAC,EAC/C,CAAC,cACNnD,KAAA,QAAKwD,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,WAAS,CAAM,CAAC,cAC7C3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAEQ,MAAM,CAACb,MAAM,EAAI,CAAC,CAAO,CAAC,EACrD,CAAC,cACNpD,KAAA,QAAKwD,SAAS,CAAC,MAAM,CAAAC,QAAA,eACnB3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAC,UAAQ,CAAM,CAAC,cAC5C3D,IAAA,SAAM0D,SAAS,CAAC,YAAY,CAAAC,QAAA,CAAEQ,MAAM,CAACZ,GAAG,CAAO,CAAC,EAC7C,CAAC,EACH,CAAC,CACL3C,YAAY,GAAKyB,MAAM,eAAIrC,IAAA,QAAK0D,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,UAAQ,CAAK,CAAC,GAtBnEtB,MAuBF,CAAC,EACP,CAAC,CACC,CAAC,EACH,CACN,cAEDnC,KAAA,QAAKwD,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC/B3D,IAAA,QAAK0D,SAAS,CAAC,aAAa,CAAAC,QAAA,cAC1B3D,IAAA,OAAA2D,QAAA,CACGjD,YAAY,EAAIE,YAAY,cAC3BV,KAAA,CAAAE,SAAA,EAAAuD,QAAA,EAAE,WAEA,CAACjD,YAAY,EAAI,MACfA,YAAY,GAAK,OAAO,CAAG,QAAQ,CACnCA,YAAY,GAAK,QAAQ,CAAG,UAAU,CACtC,SAAS,EACT,CACDE,YAAY,EAAI,MAAMA,YAAY,EAAE,CACpC,KAAKJ,YAAY,CAACuD,MAAM,GAAG,EAC5B,CAAC,CAEH,kBAAkBzD,aAAa,CAACyD,MAAM,EAAI,CAAC,GAC5C,CACC,CAAC,CACF,CAAC,cAEN7D,KAAA,QAAKwD,SAAS,CAAC,cAAc,CAAAC,QAAA,eAC3BzD,KAAA,QAAKwD,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC/B3D,IAAA,UACEoE,IAAI,CAAC,MAAM,CACXC,WAAW,CAAC,qBAAqB,CACjCC,KAAK,CAAExD,aAAc,CACrByD,QAAQ,CAAGC,CAAC,EAAKzD,gBAAgB,CAACyD,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAClDZ,SAAS,CAAC,cAAc,CACzB,CAAC,CACD5C,aAAa,eACZd,IAAA,WACE0D,SAAS,CAAC,kBAAkB,CAC5BE,OAAO,CAAEA,CAAA,GAAM7C,gBAAgB,CAAC,EAAE,CAAE,CAAA4C,QAAA,CACrC,MAED,CAAQ,CACT,EACE,CAAC,CAEL,CAACjD,YAAY,EAAIE,YAAY,EAAIE,aAAa,gBAC7Cd,IAAA,WACE0D,SAAS,CAAC,sBAAsB,CAChCE,OAAO,CAAEhB,eAAgB,CAAAe,QAAA,CAC1B,mBAED,CAAQ,CACT,EACE,CAAC,EACH,CAAC,cAEN3D,IAAA,QAAK0D,SAAS,CAAC,iBAAiB,CAAAC,QAAA,cAC9BzD,KAAA,UAAOwD,SAAS,CAAC,iBAAiB,CAAAC,QAAA,eAChC3D,IAAA,UAAA2D,QAAA,cACEzD,KAAA,OAAAyD,QAAA,eACE3D,IAAA,OAAA2D,QAAA,CAAI,SAAO,CAAI,CAAC,cAChB3D,IAAA,OAAA2D,QAAA,CAAI,QAAM,CAAI,CAAC,cACf3D,IAAA,OAAA2D,QAAA,CAAI,QAAM,CAAI,CAAC,cACf3D,IAAA,OAAA2D,QAAA,CAAI,WAAS,CAAI,CAAC,cAClB3D,IAAA,OAAA2D,QAAA,CAAI,SAAO,CAAI,CAAC,EACd,CAAC,CACA,CAAC,cACR3D,IAAA,UAAA2D,QAAA,CACGnD,YAAY,CAACuD,MAAM,CAAG,CAAC,CACtBvD,YAAY,CAACyD,GAAG,CAAEzB,OAAO,eACvBtC,KAAA,OAAAyD,QAAA,eACE3D,IAAA,OAAA2D,QAAA,CAAKnB,OAAO,CAACA,OAAO,CAAK,CAAC,cAC1BxC,IAAA,OAAA2D,QAAA,CAAKnB,OAAO,CAACH,MAAM,EAAI,KAAK,CAAK,CAAC,cAClCrC,IAAA,OAAA2D,QAAA,cACE3D,IAAA,CAACF,eAAe,EAACsC,MAAM,CAAEI,OAAO,CAACJ,MAAO,CAAE,CAAC,CACzC,CAAC,cACLpC,IAAA,OAAA2D,QAAA,CAAKd,UAAU,CAACL,OAAO,CAACkC,YAAY,EAAIlC,OAAO,CAACmC,YAAY,CAAC,CAAK,CAAC,cACnE3E,IAAA,OAAA2D,QAAA,cACE3D,IAAA,CAACJ,IAAI,EAACgF,EAAE,CAAE,YAAYpC,OAAO,CAACqC,EAAE,EAAIrC,OAAO,CAACA,OAAO,EAAG,CAACkB,SAAS,CAAC,cAAc,CAAAC,QAAA,CAAC,cAEhF,CAAM,CAAC,CACL,CAAC,GAXEnB,OAAO,CAACqC,EAAE,EAAIrC,OAAO,CAACA,OAY3B,CACL,CAAC,cAEFxC,IAAA,OAAA2D,QAAA,cACE3D,IAAA,OAAI8E,OAAO,CAAC,GAAG,CAACC,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAQ,CAAEC,OAAO,CAAE,MAAO,CAAE,CAAAtB,QAAA,CAAC,yCAEjE,CAAI,CAAC,CACH,CACL,CACI,CAAC,EACH,CAAC,CACL,CAAC,EACH,CAAC,CAEV,CAAC,CAED,cAAe,CAAAtD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}