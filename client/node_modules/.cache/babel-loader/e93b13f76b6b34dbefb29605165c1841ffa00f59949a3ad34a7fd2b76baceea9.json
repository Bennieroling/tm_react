{"ast":null,"code":"import React,{useState,useEffect}from'react';import{telemetryApi}from'../services/api';import StatusIndicator from'../components/StatusIndicator';import'./GlobalView.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const GlobalView=()=>{const[globalData,setGlobalData]=useState([]);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[searchTerm,setSearchTerm]=useState('');const[filter,setFilter]=useState('all');useEffect(()=>{const fetchGlobalStatus=async()=>{try{setLoading(true);const response=await telemetryApi.getGlobalStatus();console.log('Global status data:',response.data);// Handle the case where the response contains a data property (wrapped response)\nconst countryData=response.data.data||response.data;// Make sure we have an array before calling forEach\nif(Array.isArray(countryData)){setGlobalData(countryData);}else{console.error('Expected an array but received:',typeof countryData);setError('Received invalid data format from the server');}setLoading(false);}catch(err){setError('Failed to fetch global status. Please try again later.');setLoading(false);console.error('Error fetching global status:',err);}};fetchGlobalStatus();},[]);const handleSearchChange=e=>{setSearchTerm(e.target.value);};const handleFilterChange=newFilter=>{setFilter(newFilter);};const filteredData=globalData.filter(country=>{const matchesSearch=country.country.toLowerCase().includes(searchTerm.toLowerCase());if(filter==='all')return matchesSearch;if(filter==='issues')return matchesSearch&&country.status!=='green';if(filter==='green')return matchesSearch&&country.status==='green';if(filter==='yellow')return matchesSearch&&country.status==='yellow';if(filter==='red')return matchesSearch&&country.status==='red';return matchesSearch;});const getStatusCounts=()=>{const counts={green:0,yellow:0,red:0,total:globalData.length};if(Array.isArray(globalData)){globalData.forEach(country=>{if(country.status){counts[country.status]=(counts[country.status]||0)+1;}});}return counts;};// Format percentage with commas\nconst formatNumber=num=>{return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g,\",\");};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading global status...\"});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:error});}const counts=getStatusCounts();return/*#__PURE__*/_jsxs(\"div\",{className:\"global-view\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Global Telephony Status\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-summary\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"status-card all\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Total Countries\"}),/*#__PURE__*/_jsx(\"div\",{className:\"status-count\",children:formatNumber(counts.total)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-card green\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Online\"}),/*#__PURE__*/_jsx(\"div\",{className:\"status-count\",children:formatNumber(counts.green)}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-percentage\",children:[counts.total?Math.round(counts.green/counts.total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-card yellow\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Degraded\"}),/*#__PURE__*/_jsx(\"div\",{className:\"status-count\",children:formatNumber(counts.yellow)}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-percentage\",children:[counts.total?Math.round(counts.yellow/counts.total*100):0,\"%\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-card red\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Offline\"}),/*#__PURE__*/_jsx(\"div\",{className:\"status-count\",children:formatNumber(counts.red)}),/*#__PURE__*/_jsxs(\"div\",{className:\"status-percentage\",children:[counts.total?Math.round(counts.red/counts.total*100):0,\"%\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"search\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Search for a country...\",value:searchTerm,onChange:handleSearchChange})}),/*#__PURE__*/_jsxs(\"div\",{className:\"filters\",children:[/*#__PURE__*/_jsx(\"button\",{className:`filter-btn ${filter==='all'?'active':''}`,onClick:()=>handleFilterChange('all'),children:\"All Countries\"}),/*#__PURE__*/_jsx(\"button\",{className:`filter-btn ${filter==='issues'?'active':''}`,onClick:()=>handleFilterChange('issues'),children:\"Issues Only\"}),/*#__PURE__*/_jsx(\"button\",{className:`filter-btn green ${filter==='green'?'active':''}`,onClick:()=>handleFilterChange('green'),children:\"Online\"}),/*#__PURE__*/_jsx(\"button\",{className:`filter-btn yellow ${filter==='yellow'?'active':''}`,onClick:()=>handleFilterChange('yellow'),children:\"Degraded\"}),/*#__PURE__*/_jsx(\"button\",{className:`filter-btn red ${filter==='red'?'active':''}`,onClick:()=>handleFilterChange('red'),children:\"Offline\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"countries-grid\",children:filteredData.length>0?filteredData.map(country=>/*#__PURE__*/_jsxs(\"div\",{className:`country-card status-${country.status}`,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"card-header\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"country-name\",children:country.country}),/*#__PURE__*/_jsx(\"div\",{className:\"status-indicator\",children:/*#__PURE__*/_jsx(StatusIndicator,{status:country.status})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"country-status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"status-text\",children:country.status==='green'?'Online':country.status==='yellow'?'Degraded':'Offline'})}),/*#__PURE__*/_jsxs(\"div\",{className:\"country-metrics\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"metric\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"metric-label\",children:\"Total Numbers\"}),/*#__PURE__*/_jsx(\"div\",{className:\"metric-value\",children:formatNumber(country.total||0)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"metric-label\",children:\"Active\"}),/*#__PURE__*/_jsx(\"div\",{className:\"metric-value\",children:formatNumber(country.active||0)})]}),country.uptime!==undefined&&/*#__PURE__*/_jsxs(\"div\",{className:\"metric\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"metric-label\",children:\"Uptime\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric-value\",children:[country.uptime,\"%\"]})]})]}),country.last_checked&&/*#__PURE__*/_jsxs(\"div\",{className:\"last-updated\",children:[\"Last checked: \",new Date(country.last_checked).toLocaleString()]})]},country.country)):/*#__PURE__*/_jsx(\"div\",{className:\"no-results\",children:\"No countries match your search criteria\"})})]});};export default GlobalView;","map":{"version":3,"names":["React","useState","useEffect","telemetryApi","StatusIndicator","jsx","_jsx","jsxs","_jsxs","GlobalView","globalData","setGlobalData","loading","setLoading","error","setError","searchTerm","setSearchTerm","filter","setFilter","fetchGlobalStatus","response","getGlobalStatus","console","log","data","countryData","Array","isArray","err","handleSearchChange","e","target","value","handleFilterChange","newFilter","filteredData","country","matchesSearch","toLowerCase","includes","status","getStatusCounts","counts","green","yellow","red","total","length","forEach","formatNumber","num","toString","replace","className","children","Math","round","type","placeholder","onChange","onClick","map","active","uptime","undefined","last_checked","Date","toLocaleString"],"sources":["/Users/benvandijk/Downloads/monitoring/TM/client/src/views/GlobalView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { telemetryApi } from '../services/api';\nimport StatusIndicator from '../components/StatusIndicator';\nimport './GlobalView.css';\n\nconst GlobalView = () => {\n  const [globalData, setGlobalData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filter, setFilter] = useState('all');\n\n  useEffect(() => {\n    const fetchGlobalStatus = async () => {\n      try {\n        setLoading(true);\n        const response = await telemetryApi.getGlobalStatus();\n        console.log('Global status data:', response.data);\n        \n        // Handle the case where the response contains a data property (wrapped response)\n        const countryData = response.data.data || response.data;\n        \n        // Make sure we have an array before calling forEach\n        if (Array.isArray(countryData)) {\n          setGlobalData(countryData);\n        } else {\n          console.error('Expected an array but received:', typeof countryData);\n          setError('Received invalid data format from the server');\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        setError('Failed to fetch global status. Please try again later.');\n        setLoading(false);\n        console.error('Error fetching global status:', err);\n      }\n    };\n\n    fetchGlobalStatus();\n  }, []);\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleFilterChange = (newFilter) => {\n    setFilter(newFilter);\n  };\n\n  const filteredData = globalData.filter(country => {\n    const matchesSearch = country.country.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    if (filter === 'all') return matchesSearch;\n    if (filter === 'issues') return matchesSearch && country.status !== 'green';\n    if (filter === 'green') return matchesSearch && country.status === 'green';\n    if (filter === 'yellow') return matchesSearch && country.status === 'yellow';\n    if (filter === 'red') return matchesSearch && country.status === 'red';\n    \n    return matchesSearch;\n  });\n\n  const getStatusCounts = () => {\n    const counts = {\n      green: 0,\n      yellow: 0,\n      red: 0,\n      total: globalData.length\n    };\n    \n    if (Array.isArray(globalData)) {\n      globalData.forEach(country => {\n        if (country.status) {\n          counts[country.status] = (counts[country.status] || 0) + 1;\n        }\n      });\n    }\n    \n    return counts;\n  };\n\n  // Format percentage with commas\n  const formatNumber = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  };\n\n  if (loading) {\n    return <div className=\"loading\">Loading global status...</div>;\n  }\n\n  if (error) {\n    return <div className=\"error\">{error}</div>;\n  }\n\n  const counts = getStatusCounts();\n\n  return (\n    <div className=\"global-view\">\n      <h1>Global Telephony Status</h1>\n      \n      <div className=\"status-summary\">\n        <div className=\"status-card all\">\n          <h3>Total Countries</h3>\n          <div className=\"status-count\">{formatNumber(counts.total)}</div>\n        </div>\n        <div className=\"status-card green\">\n          <h3>Online</h3>\n          <div className=\"status-count\">{formatNumber(counts.green)}</div>\n          <div className=\"status-percentage\">\n            {counts.total ? Math.round((counts.green / counts.total) * 100) : 0}%\n          </div>\n        </div>\n        <div className=\"status-card yellow\">\n          <h3>Degraded</h3>\n          <div className=\"status-count\">{formatNumber(counts.yellow)}</div>\n          <div className=\"status-percentage\">\n            {counts.total ? Math.round((counts.yellow / counts.total) * 100) : 0}%\n          </div>\n        </div>\n        <div className=\"status-card red\">\n          <h3>Offline</h3>\n          <div className=\"status-count\">{formatNumber(counts.red)}</div>\n          <div className=\"status-percentage\">\n            {counts.total ? Math.round((counts.red / counts.total) * 100) : 0}%\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"controls\">\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search for a country...\"\n            value={searchTerm}\n            onChange={handleSearchChange}\n          />\n        </div>\n        \n        <div className=\"filters\">\n          <button\n            className={`filter-btn ${filter === 'all' ? 'active' : ''}`}\n            onClick={() => handleFilterChange('all')}\n          >\n            All Countries\n          </button>\n          <button\n            className={`filter-btn ${filter === 'issues' ? 'active' : ''}`}\n            onClick={() => handleFilterChange('issues')}\n          >\n            Issues Only\n          </button>\n          <button\n            className={`filter-btn green ${filter === 'green' ? 'active' : ''}`}\n            onClick={() => handleFilterChange('green')}\n          >\n            Online\n          </button>\n          <button\n            className={`filter-btn yellow ${filter === 'yellow' ? 'active' : ''}`}\n            onClick={() => handleFilterChange('yellow')}\n          >\n            Degraded\n          </button>\n          <button\n            className={`filter-btn red ${filter === 'red' ? 'active' : ''}`}\n            onClick={() => handleFilterChange('red')}\n          >\n            Offline\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"countries-grid\">\n        {filteredData.length > 0 ? (\n          filteredData.map((country) => (\n            <div key={country.country} className={`country-card status-${country.status}`}>\n              <div className=\"card-header\">\n                <h2 className=\"country-name\">{country.country}</h2>\n                <div className=\"status-indicator\">\n                  <StatusIndicator status={country.status} />\n                </div>\n              </div>\n              \n              <div className=\"country-status\">\n                <span className=\"status-text\">\n                  {country.status === 'green' ? 'Online' : \n                   country.status === 'yellow' ? 'Degraded' : 'Offline'}\n                </span>\n              </div>\n              \n              <div className=\"country-metrics\">\n                <div className=\"metric\">\n                  <div className=\"metric-label\">Total Numbers</div>\n                  <div className=\"metric-value\">{formatNumber(country.total || 0)}</div>\n                </div>\n                <div className=\"metric\">\n                  <div className=\"metric-label\">Active</div>\n                  <div className=\"metric-value\">{formatNumber(country.active || 0)}</div>\n                </div>\n                {country.uptime !== undefined && (\n                  <div className=\"metric\">\n                    <div className=\"metric-label\">Uptime</div>\n                    <div className=\"metric-value\">{country.uptime}%</div>\n                  </div>\n                )}\n              </div>\n              \n              {country.last_checked && (\n                <div className=\"last-updated\">\n                  Last checked: {new Date(country.last_checked).toLocaleString()}\n                </div>\n              )}\n            </div>\n          ))\n        ) : (\n          <div className=\"no-results\">\n            No countries match your search criteria\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}