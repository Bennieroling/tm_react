{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'https://we-test-tm-applinux-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a response interceptor for error handling\napiClient.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Telemetry API endpoints\nexport const telemetryApi = {\n  // Get global telemetry status for all countries\n  getGlobalStatus: async () => {\n    try {\n      console.log('Calling getGlobalStatus API');\n      const response = await apiClient.get('/telemetry/global');\n      console.log('Received API response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('API Error in getGlobalStatus:', error);\n      throw error;\n    }\n  },\n  // Get detailed telemetry status for a specific country\n  getCountryStatus: async countryId => {\n    try {\n      console.log(`Calling getCountryStatus API for country: ${countryId}`);\n      const response = await apiClient.get(`/telemetry/country/${countryId}`);\n      console.log('Received API response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`API Error in getCountryStatus for ${countryId}:`, error);\n      throw error;\n    }\n  }\n};\n\n// History API endpoints\nexport const historyApi = {\n  // Get status history with time-based filtering\n  getStatusHistory: async (timeRange = '5d', startDate = null, endDate = null) => {\n    try {\n      const params = {\n        timeRange\n      };\n      if (timeRange === 'custom' && startDate && endDate) {\n        params.startDate = startDate;\n        params.endDate = endDate;\n      }\n      const response = await apiClient.get('/history', {\n        params\n      });\n      return response; // Return the entire response, not just response.data\n    } catch (error) {\n      console.error('API Error in getStatusHistory:', error);\n      throw error;\n    }\n  },\n  // Get phone number history with time-based filtering\n  getPhoneHistory: async (timeRange = '5d', startDate = null, endDate = null, number = null) => {\n    try {\n      const params = {\n        timeRange\n      };\n      if (timeRange === 'custom' && startDate && endDate) {\n        params.startDate = startDate;\n        params.endDate = endDate;\n      }\n      if (number) {\n        params.number = number;\n      }\n      const response = await apiClient.get('/history/phone', {\n        params\n      });\n      return response; // Return the entire response, not just response.data\n    } catch (error) {\n      console.error('API Error in getPhoneHistory:', error);\n      throw error;\n    }\n  }\n};\n\n// Phone Numbers API endpoints\nexport const phoneApi = {\n  // Get phone numbers for a specific country\n  getPhoneNumbersByCountry: async country => {\n    try {\n      const response = await apiClient.get(`/phone/country/${encodeURIComponent(country)}`);\n      return response;\n    } catch (error) {\n      console.error(`API Error in getPhoneNumbersByCountry for ${country}:`, error);\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","response","use","error","_error$response","console","data","message","Promise","reject","telemetryApi","getGlobalStatus","log","get","getCountryStatus","countryId","historyApi","getStatusHistory","timeRange","startDate","endDate","params","getPhoneHistory","number","phoneApi","getPhoneNumbersByCountry","country","encodeURIComponent"],"sources":["/Users/benvandijk/Downloads/monitoring/TM/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'https://we-test-tm-applinux-01.azurewebsites.net/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Telemetry API endpoints\nexport const telemetryApi = {\n  // Get global telemetry status for all countries\n  getGlobalStatus: async () => {\n    try {\n      console.log('Calling getGlobalStatus API');\n      const response = await apiClient.get('/telemetry/global');\n      console.log('Received API response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('API Error in getGlobalStatus:', error);\n      throw error;\n    }\n  },\n\n  // Get detailed telemetry status for a specific country\n  getCountryStatus: async (countryId) => {\n    try {\n      console.log(`Calling getCountryStatus API for country: ${countryId}`);\n      const response = await apiClient.get(`/telemetry/country/${countryId}`);\n      console.log('Received API response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error(`API Error in getCountryStatus for ${countryId}:`, error);\n      throw error;\n    }\n  }\n};\n\n// History API endpoints\nexport const historyApi = {\n  // Get status history with time-based filtering\n  getStatusHistory: async (timeRange = '5d', startDate = null, endDate = null) => {\n    try {\n      const params = { timeRange };\n      \n      if (timeRange === 'custom' && startDate && endDate) {\n        params.startDate = startDate;\n        params.endDate = endDate;\n      }\n      \n      const response = await apiClient.get('/history', { params });\n      return response; // Return the entire response, not just response.data\n    } catch (error) {\n      console.error('API Error in getStatusHistory:', error);\n      throw error;\n    }\n  },\n  \n  // Get phone number history with time-based filtering\n  getPhoneHistory: async (timeRange = '5d', startDate = null, endDate = null, number = null) => {\n    try {\n      const params = { timeRange };\n      \n      if (timeRange === 'custom' && startDate && endDate) {\n        params.startDate = startDate;\n        params.endDate = endDate;\n      }\n      \n      if (number) {\n        params.number = number;\n      }\n      \n      const response = await apiClient.get('/history/phone', { params });\n      return response; // Return the entire response, not just response.data\n    } catch (error) {\n      console.error('API Error in getPhoneHistory:', error);\n      throw error;\n    }\n  }\n};\n\n// Phone Numbers API endpoints\nexport const phoneApi = {\n  // Get phone numbers for a specific country\n  getPhoneNumbersByCountry: async (country) => {\n    try {\n      const response = await apiClient.get(`/phone/country/${encodeURIComponent(country)}`);\n      return response;\n    } catch (error) {\n      console.error(`API Error in getPhoneNumbersByCountry for ${country}:`, error);\n      throw error;\n    }\n  }\n};\n\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,sDAAsD;;AAEvG;AACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAChCD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACTC,OAAO,CAACF,KAAK,CAAC,YAAY,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBE,IAAI,KAAIH,KAAK,CAACI,OAAO,CAAC;EAClE,OAAOC,OAAO,CAACC,MAAM,CAACN,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMO,YAAY,GAAG;EAC1B;EACAC,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACFN,OAAO,CAACO,GAAG,CAAC,6BAA6B,CAAC;MAC1C,MAAMX,QAAQ,GAAG,MAAML,SAAS,CAACiB,GAAG,CAAC,mBAAmB,CAAC;MACzDR,OAAO,CAACO,GAAG,CAAC,wBAAwB,EAAEX,QAAQ,CAACK,IAAI,CAAC;MACpD,OAAOL,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAW,gBAAgB,EAAE,MAAOC,SAAS,IAAK;IACrC,IAAI;MACFV,OAAO,CAACO,GAAG,CAAC,6CAA6CG,SAAS,EAAE,CAAC;MACrE,MAAMd,QAAQ,GAAG,MAAML,SAAS,CAACiB,GAAG,CAAC,sBAAsBE,SAAS,EAAE,CAAC;MACvEV,OAAO,CAACO,GAAG,CAAC,wBAAwB,EAAEX,QAAQ,CAACK,IAAI,CAAC;MACpD,OAAOL,QAAQ,CAACK,IAAI;IACtB,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,qCAAqCY,SAAS,GAAG,EAAEZ,KAAK,CAAC;MACvE,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,UAAU,GAAG;EACxB;EACAC,gBAAgB,EAAE,MAAAA,CAAOC,SAAS,GAAG,IAAI,EAAEC,SAAS,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAI,KAAK;IAC9E,IAAI;MACF,MAAMC,MAAM,GAAG;QAAEH;MAAU,CAAC;MAE5B,IAAIA,SAAS,KAAK,QAAQ,IAAIC,SAAS,IAAIC,OAAO,EAAE;QAClDC,MAAM,CAACF,SAAS,GAAGA,SAAS;QAC5BE,MAAM,CAACD,OAAO,GAAGA,OAAO;MAC1B;MAEA,MAAMnB,QAAQ,GAAG,MAAML,SAAS,CAACiB,GAAG,CAAC,UAAU,EAAE;QAAEQ;MAAO,CAAC,CAAC;MAC5D,OAAOpB,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAmB,eAAe,EAAE,MAAAA,CAAOJ,SAAS,GAAG,IAAI,EAAEC,SAAS,GAAG,IAAI,EAAEC,OAAO,GAAG,IAAI,EAAEG,MAAM,GAAG,IAAI,KAAK;IAC5F,IAAI;MACF,MAAMF,MAAM,GAAG;QAAEH;MAAU,CAAC;MAE5B,IAAIA,SAAS,KAAK,QAAQ,IAAIC,SAAS,IAAIC,OAAO,EAAE;QAClDC,MAAM,CAACF,SAAS,GAAGA,SAAS;QAC5BE,MAAM,CAACD,OAAO,GAAGA,OAAO;MAC1B;MAEA,IAAIG,MAAM,EAAE;QACVF,MAAM,CAACE,MAAM,GAAGA,MAAM;MACxB;MAEA,MAAMtB,QAAQ,GAAG,MAAML,SAAS,CAACiB,GAAG,CAAC,gBAAgB,EAAE;QAAEQ;MAAO,CAAC,CAAC;MAClE,OAAOpB,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMqB,QAAQ,GAAG;EACtB;EACAC,wBAAwB,EAAE,MAAOC,OAAO,IAAK;IAC3C,IAAI;MACF,MAAMzB,QAAQ,GAAG,MAAML,SAAS,CAACiB,GAAG,CAAC,kBAAkBc,kBAAkB,CAACD,OAAO,CAAC,EAAE,CAAC;MACrF,OAAOzB,QAAQ;IACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdE,OAAO,CAACF,KAAK,CAAC,6CAA6CuB,OAAO,GAAG,EAAEvB,KAAK,CAAC;MAC7E,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeP,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}