{"ast":null,"code":"var _jsxFileName = \"/Users/benvandijk/Downloads/monitoring/TM/telephony-monitor/client/src/views/GlobalView.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport StatusIndicator from '../components/StatusIndicator';\nimport { telemetryApi } from '../services/api';\nimport './GlobalView.css';\nconst GlobalView = () => {\n  var _telemetryData$countr;\n  const [telemetryData, setTelemetryData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchTelemetryData = async () => {\n    try {\n      setLoading(true);\n      const data = await telemetryApi.fetchGlobalTelemetry();\n      setTelemetryData(data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching telemetry data:', err);\n      setError('Failed to fetch telemetry data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchTelemetryData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"loading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    }, \"Loading global status...\");\n  }\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"error-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, error), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: fetchTelemetryData,\n      className: \"retry-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, \"Retry\"));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"global-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, \"Global Status\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"status-overview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, \"Status Overview\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Last updated: \", new Date().toLocaleString())), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"countries-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, telemetryData === null || telemetryData === void 0 ? void 0 : (_telemetryData$countr = telemetryData.countries) === null || _telemetryData$countr === void 0 ? void 0 : _telemetryData$countr.map(country => /*#__PURE__*/React.createElement(\"div\", {\n    key: country.countryId,\n    className: \"country-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: `/country/${country.countryId}`,\n    className: \"country-link\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, country.name), /*#__PURE__*/React.createElement(StatusIndicator, {\n    status: country.status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }))))));\n};\nexport default GlobalView;","map":{"version":3,"names":["React","useState","useEffect","Link","StatusIndicator","telemetryApi","GlobalView","_telemetryData$countr","telemetryData","setTelemetryData","error","setError","loading","setLoading","fetchTelemetryData","data","fetchGlobalTelemetry","err","console","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Date","toLocaleString","countries","map","country","key","countryId","to","name","status"],"sources":["/Users/benvandijk/Downloads/monitoring/TM/telephony-monitor/client/src/views/GlobalView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport StatusIndicator from '../components/StatusIndicator';\nimport { telemetryApi } from '../services/api';\nimport './GlobalView.css';\n\nconst GlobalView = () => {\n  const [telemetryData, setTelemetryData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const fetchTelemetryData = async () => {\n    try {\n      setLoading(true);\n      const data = await telemetryApi.fetchGlobalTelemetry();\n      setTelemetryData(data);\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching telemetry data:', err);\n      setError('Failed to fetch telemetry data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchTelemetryData();\n  }, []);\n\n  if (loading) {\n    return <div className=\"loading\">Loading global status...</div>;\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <p className=\"error-message\">{error}</p>\n        <button onClick={fetchTelemetryData} className=\"retry-button\">\n          Retry\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"global-view\">\n      <h1>Global Status</h1>\n      <div className=\"status-overview\">\n        <h2>Status Overview</h2>\n        <p>\n          Last updated: {new Date().toLocaleString()}\n        </p>\n      </div>\n\n      <div className=\"countries-grid\">\n        {telemetryData?.countries?.map((country) => (\n          <div key={country.countryId} className=\"country-card\">\n            <Link to={`/country/${country.countryId}`} className=\"country-link\">\n              <h3>{country.name}</h3>\n              <StatusIndicator status={country.status} />\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GlobalView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}