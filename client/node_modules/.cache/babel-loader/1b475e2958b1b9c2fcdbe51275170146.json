{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request/response interceptors for debugging\napiClient.interceptors.request.use(config => {\n  console.log('Making API request:', config.method.toUpperCase(), config.url);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor for error handling\napiClient.interceptors.response.use(response => {\n  console.log('API Response:', response.status, response.config.url);\n  return response;\n}, error => {\n  var _error$response, _error$config, _error$response2;\n  console.error('API Error:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Telemetry API endpoints\nexport const telemetryApi = {\n  // Get global telemetry status for all countries\n  getGlobalStatus: async () => {\n    const response = await apiClient.get('/telemetry/global');\n    return response.data;\n  },\n  // Get detailed telemetry status for a specific country\n  getCountryStatus: async countryId => {\n    const response = await apiClient.get(`/telemetry/country/${countryId}`);\n    return response.data;\n  }\n};\n\n// History API endpoints\nexport const historyApi = {\n  // Get status history with time-based filtering\n  getStatusHistory: async (timeRange = '5d', startDate = null, endDate = null) => {\n    console.log('Calling getStatusHistory with:', {\n      timeRange,\n      startDate,\n      endDate\n    });\n    let params = {\n      timeRange\n    };\n    if (timeRange === 'custom' && startDate && endDate) {\n      params.startDate = startDate;\n      params.endDate = endDate;\n    }\n    console.log('Request params:', params);\n    try {\n      const response = await apiClient.get('/history', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('History API error:', error);\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","console","log","method","toUpperCase","url","error","Promise","reject","response","status","_error$response","_error$config","_error$response2","data","message","telemetryApi","getGlobalStatus","get","getCountryStatus","countryId","historyApi","getStatusHistory","timeRange","startDate","endDate","params"],"sources":["/Users/benvandijk/Downloads/monitoring/TM/telephony-monitor/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request/response interceptors for debugging\napiClient.interceptors.request.use(\n  (config) => {\n    console.log('Making API request:', config.method.toUpperCase(), config.url);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => {\n    console.log('API Response:', response.status, response.config.url);\n    return response;\n  },\n  (error) => {\n    console.error('API Error:', error.response?.status, error.config?.url, error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Telemetry API endpoints\nexport const telemetryApi = {\n  // Get global telemetry status for all countries\n  getGlobalStatus: async () => {\n    const response = await apiClient.get('/telemetry/global');\n    return response.data;\n  },\n\n  // Get detailed telemetry status for a specific country\n  getCountryStatus: async (countryId) => {\n    const response = await apiClient.get(`/telemetry/country/${countryId}`);\n    return response.data;\n  }\n};\n\n// History API endpoints\nexport const historyApi = {\n  // Get status history with time-based filtering\n  getStatusHistory: async (timeRange = '5d', startDate = null, endDate = null) => {\n    console.log('Calling getStatusHistory with:', { timeRange, startDate, endDate });\n    \n    let params = { timeRange };\n    \n    if (timeRange === 'custom' && startDate && endDate) {\n      params.startDate = startDate;\n      params.endDate = endDate;\n    }\n    \n    console.log('Request params:', params);\n    \n    try {\n      const response = await apiClient.get('/history', { params });\n      return response.data;\n    } catch (error) {\n      console.error('History API error:', error);\n      throw error;\n    }\n  }\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}