{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'/api';// Create axios instance with default config\nconst apiClient=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Add a response interceptor for error handling\napiClient.interceptors.response.use(response=>response,error=>{var _error$response;console.error('API Error:',((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||error.message);return Promise.reject(error);});// Telemetry API endpoints\nexport const telemetryApi={// Get global telemetry status for all countries\ngetGlobalStatus:async()=>{const response=await apiClient.get('/telemetry/global');return response.data;},// Get detailed telemetry status for a specific country\ngetCountryStatus:async countryId=>{const response=await apiClient.get(`/telemetry/country/${countryId}`);return response.data;}};// History API endpoints\nexport const historyApi={// Get status history with time-based filtering\ngetStatusHistory:async function(){let timeRange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'5d';let startDate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let endDate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;const params={timeRange};if(timeRange==='custom'&&startDate&&endDate){params.startDate=startDate;params.endDate=endDate;}const response=await apiClient.get('/history',{params});return response.data;},// Get phone number history with time-based filtering\ngetPhoneHistory:async function(){let timeRange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'5d';let startDate=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let endDate=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;let number=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;const params={timeRange};if(timeRange==='custom'&&startDate&&endDate){params.startDate=startDate;params.endDate=endDate;}if(number){params.number=number;}const response=await apiClient.get('/history/phone',{params});return response.data;}};// Phone Numbers API endpoints\nexport const phoneApi={// Get phone numbers for a specific country\ngetPhoneNumbersByCountry:async country=>{const response=await apiClient.get(`/phone/country/${encodeURIComponent(country)}`);return response.data;}};export default apiClient;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","headers","interceptors","response","use","error","_error$response","console","data","message","Promise","reject","telemetryApi","getGlobalStatus","get","getCountryStatus","countryId","historyApi","getStatusHistory","timeRange","arguments","length","undefined","startDate","endDate","params","getPhoneHistory","number","phoneApi","getPhoneNumbersByCountry","country","encodeURIComponent"],"sources":["/Users/benvandijk/Downloads/monitoring/TM/client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a response interceptor for error handling\napiClient.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Telemetry API endpoints\nexport const telemetryApi = {\n  // Get global telemetry status for all countries\n  getGlobalStatus: async () => {\n    const response = await apiClient.get('/telemetry/global');\n    return response.data;\n  },\n\n  // Get detailed telemetry status for a specific country\n  getCountryStatus: async (countryId) => {\n    const response = await apiClient.get(`/telemetry/country/${countryId}`);\n    return response.data;\n  }\n};\n\n// History API endpoints\nexport const historyApi = {\n  // Get status history with time-based filtering\n  getStatusHistory: async (timeRange = '5d', startDate = null, endDate = null) => {\n    const params = { timeRange };\n    \n    if (timeRange === 'custom' && startDate && endDate) {\n      params.startDate = startDate;\n      params.endDate = endDate;\n    }\n    \n    const response = await apiClient.get('/history', { params });\n    return response.data;\n  },\n  \n  // Get phone number history with time-based filtering\n  getPhoneHistory: async (timeRange = '5d', startDate = null, endDate = null, number = null) => {\n    const params = { timeRange };\n    \n    if (timeRange === 'custom' && startDate && endDate) {\n      params.startDate = startDate;\n      params.endDate = endDate;\n    }\n    \n    if (number) {\n      params.number = number;\n    }\n    \n    const response = await apiClient.get('/history/phone', { params });\n    return response.data;\n  }\n};\n\n// Phone Numbers API endpoints\nexport const phoneApi = {\n  // Get phone numbers for a specific country\n  getPhoneNumbersByCountry: async (country) => {\n    const response = await apiClient.get(`/phone/country/${encodeURIComponent(country)}`);\n    return response.data;\n  }\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}